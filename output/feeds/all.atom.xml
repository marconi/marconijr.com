<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>marconijr</title><link href="http://marconijr.com/" rel="alternate"></link><link href="http://marconijr.com/feeds/all.atom.xml" rel="self"></link><id>http://marconijr.com/</id><updated>2013-06-30T12:37:00+08:00</updated><entry><title>WebSockets with Circus and Nginx</title><link href="http://marconijr.com/websockets-circus-nginx.html" rel="alternate"></link><updated>2013-06-30T12:37:00+08:00</updated><author><name>Marconi Moreto</name></author><id>tag:marconijr.com,2013-06-30:websockets-circus-nginx.html</id><summary type="html">&lt;p&gt;Although we will be talking about WebSockets in general, It'll be concentrated on a shim, &lt;a href="http://socket.io/"&gt;Socket.IO&lt;/a&gt; in this case. Socket.IO is a shim that enables you to use WebSocket if your browser supports it or fallback to other mechanism like long-polling, flash, etc. if not.&lt;/p&gt;
&lt;p&gt;This is the first of probably a series of posts on how one might serve websockets with Python. As far as I know, there's not a mature solution yet for websockets in the Python world but there are two ways I've tried which works effectively.&lt;/p&gt;
&lt;h3&gt;Gevent-SocketIO&lt;/h3&gt;
&lt;p&gt;This one is a promising project, lots of examples from different frameworks and I've contributed &lt;a href="https://github.com/abourget/gevent-socketio/commit/af20de07f18267d01430d19374d1e1928cd627f8"&gt;one of them&lt;/a&gt; myself. &lt;a href="https://gevent-socketio.readthedocs.org/en/latest/"&gt;gevent-socketio&lt;/a&gt; is a server implementation of the &lt;a href="https://github.com/LearnBoost/socket.io-protocol"&gt;Socket.IO protocol&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Node&lt;/h3&gt;
&lt;p&gt;And then there's &lt;a href="http://nodejs.org/"&gt;Node&lt;/a&gt;, the Javascript framework from where Socket.IO was originally built for. For devs with JS stack, its an easy deicision although there are other variants of a similar shim in the JS world too.&lt;/p&gt;
&lt;p&gt;For this post we will concentrate on gevent-socketio, and then Node soon. In the gevent-socketio github repo, there's an example project called &lt;a href="https://github.com/abourget/gevent-socketio/tree/master/examples/simple_pyramid_chat"&gt;simple_pyramid_chat&lt;/a&gt; we will be using it instead of building our own from ground up.&lt;/p&gt;
&lt;p&gt;First thing is first, lets install all the required dependencies but this time we're going to use &lt;a href="http://www.virtualenv.org/en/latest/"&gt;virtualenv&lt;/a&gt; and &lt;a href="https://bitbucket.org/dhellmann/virtualenvwrapper"&gt;virtualenvwrapper&lt;/a&gt;:&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;U&lt;/span&gt; &lt;span class="n"&gt;virtualenv&lt;/span&gt; &lt;span class="n"&gt;virtualenvwrapper&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;virtualenv is a tool that lets you create a sandbox environment for your Python application so it doesn't messed up your system wide installation, and virtualenvwrapper is just a bunch of shell commands that wraps around virtualenv commands and offer more abstraction.&lt;/p&gt;
&lt;p&gt;once installed, we need a bit of configuration for those two. Add the following lines to your &lt;code&gt;.profile&lt;/code&gt; or &lt;code&gt;.zshrc&lt;/code&gt; if you're using &lt;a href="https://github.com/robbyrussell/oh-my-zsh"&gt;zshell&lt;/a&gt;:&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;export&lt;/span&gt; &lt;span class="n"&gt;WORKON_HOME&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;Envs&lt;/span&gt;
&lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;virtualenvwrapper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;you need to make sure that $WORKON_HOME exists:&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;mkdir&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;Envs&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;and then reload your terminal by running &lt;code&gt;. ~/.profile&lt;/code&gt; or &lt;code&gt;. ~/.zshrc&lt;/code&gt;, and then finally create the virtualenv and install the dependencies in it:&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;mkvirtualenv&lt;/span&gt; &lt;span class="n"&gt;websocket_demo&lt;/span&gt;
&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;U&lt;/span&gt; &lt;span class="n"&gt;pyramid&lt;/span&gt; &lt;span class="n"&gt;gevent&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;socketio&lt;/span&gt; &lt;span class="n"&gt;circus&lt;/span&gt; &lt;span class="n"&gt;chaussette&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Next there's one thing we need to modify in the &lt;code&gt;simple_pyramid_chat&lt;/code&gt; project, in the &lt;code&gt;serve.py&lt;/code&gt;, move the line outside of the &lt;code&gt;if&lt;/code&gt; condition so it looks like:&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;development.ini&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The reason is that, that &lt;code&gt;app&lt;/code&gt; is the Pyramid app we want to be served by Chaussette and since its inside a condition that will only be run if the file is ran as stand-alone, Chaussette won't be able to find it if the module is to be imported which is what we're going to use.&lt;/p&gt;
&lt;p&gt;And then we need a &lt;code&gt;circus.ini&lt;/code&gt; file which you should be familiar if you've been following my other posts:&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;[circus]&lt;/span&gt;
&lt;span class="na"&gt;check_delay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;5&lt;/span&gt;
&lt;span class="na"&gt;endpoint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;tcp://127.0.0.1:5555&lt;/span&gt;
&lt;span class="na"&gt;pubsub_endpoint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;tcp://127.0.0.1:5556&lt;/span&gt;

&lt;span class="k"&gt;[watcher:socketio]&lt;/span&gt;
&lt;span class="na"&gt;cmd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;chaussette --fd $(circus.sockets.socketio) --backend socketio serve.app&lt;/span&gt;
&lt;span class="na"&gt;singleton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;True&lt;/span&gt;
&lt;span class="na"&gt;use_sockets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;True&lt;/span&gt;
&lt;span class="na"&gt;copy_env&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;True&lt;/span&gt;
&lt;span class="na"&gt;copy_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;True&lt;/span&gt;

&lt;span class="k"&gt;[env:socketio]&lt;/span&gt;
&lt;span class="na"&gt;PYTHONPATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/path/to/simple_pyramid_chat&lt;/span&gt;

&lt;span class="k"&gt;[socket:socketio]&lt;/span&gt;
&lt;span class="na"&gt;host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;127.0.0.1&lt;/span&gt;
&lt;span class="na"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;6543&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Everything should be familiar except that this time we're using &lt;code&gt;socketio&lt;/code&gt; as our backend for Chaussette and we have a new configuration &lt;code&gt;singleton&lt;/code&gt; which just means this watcher will have at most 1 process.&lt;/p&gt;
&lt;p&gt;We can run this now by running &lt;code&gt;circusd /path/to/simple_pyramid_chat/circus.ini&lt;/code&gt; and we'll see that the app is being served and the chat is working (You need to open two different browsers if you're testing by yourself).&lt;/p&gt;
&lt;p&gt;Then we need to tell Nginx to forward all incoming request to Circus, as of Nginx 1.3.13, Nginx now supports &lt;a href="http://nginx.org/en/docs/http/websocket.html"&gt;proxying WebSocket&lt;/a&gt; requests. And here's the Nginx config that we're going to use:&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;map&lt;/span&gt; $&lt;span class="n"&gt;http_upgrade&lt;/span&gt; $&lt;span class="n"&gt;connection_upgrade&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;default&lt;/span&gt; &lt;span class="n"&gt;upgrade&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;      &lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;listen&lt;/span&gt; 80 &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;server_name&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;location&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;proxy_pass&lt;/span&gt;         &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;127&lt;span class="p"&gt;.&lt;/span&gt;0&lt;span class="p"&gt;.&lt;/span&gt;0&lt;span class="p"&gt;.&lt;/span&gt;1&lt;span class="p"&gt;:&lt;/span&gt;6543&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;proxy_redirect&lt;/span&gt;     &lt;span class="n"&gt;off&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;proxy_buffering&lt;/span&gt;    &lt;span class="n"&gt;off&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;proxy_http_version&lt;/span&gt; 1&lt;span class="p"&gt;.&lt;/span&gt;1&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;proxy_set_header&lt;/span&gt; &lt;span class="n"&gt;Upgrade&lt;/span&gt; $&lt;span class="n"&gt;http_upgrade&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;proxy_set_header&lt;/span&gt; &lt;span class="n"&gt;Connection&lt;/span&gt; $&lt;span class="n"&gt;connection_upgrade&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Here we're just the http version for proxying to 1.1 which is required for the Nginx WebSocket proxying to work and we're passing some headers to the proxied server. The reason for the headers is that when the client requests for an upgrade, its using a &lt;a href="http://tools.ietf.org/html/rfc2616#section-13.5.1"&gt;Hop-by-hop&lt;/a&gt; headers which just means the headers doesn't reach the proxied server only to Nginx so we manually forward them. And the mapping above is just a nice little trick wherein we only set the &lt;code&gt;Connection&lt;/code&gt; header to &lt;code&gt;upgrade&lt;/code&gt; if the Upgrade field from the request received from client is present which will be once Socket.IO from client sends a WebSockte handshake.&lt;/p&gt;
&lt;p&gt;Now lets restart nginx &lt;code&gt;sudo service nginx restart&lt;/code&gt; and we should be able to access the chat app at &lt;code&gt;http://localhost&lt;/code&gt;, note that the port is not specified as it is implied for http.&lt;/p&gt;
&lt;p&gt;That's it for now, next post is using Node with Redis as a message bus between your Node and Python app.&lt;/p&gt;</summary></entry><entry><title>Deploying Circus</title><link href="http://marconijr.com/deploying-circus.html" rel="alternate"></link><updated>2013-06-26T14:54:00+08:00</updated><author><name>Marconi Moreto</name></author><id>tag:marconijr.com,2013-06-26:deploying-circus.html</id><summary type="html">&lt;p&gt;This post is a continuation from my &lt;a href="/introduction-to-circus.html"&gt;previous post&lt;/a&gt; and this time we will deploy our simple WSGI app behind &lt;a href="http://nginx.org/"&gt;Nginx&lt;/a&gt;. So if you haven't, go ahead and read that one and come back here when you're done.&lt;/p&gt;
&lt;p&gt;We will deploying our app using Ubuntu, first we need to install Nginx:&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;nginx&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;and then Circus and Chaussette:&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pip&lt;/span&gt;
&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;U&lt;/span&gt; &lt;span class="n"&gt;circus&lt;/span&gt; &lt;span class="n"&gt;chaussette&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;next, lets put our app on &lt;code&gt;/var/www/app&lt;/code&gt; and we need to add a bit of modification to our &lt;code&gt;circus.ini&lt;/code&gt; file, add this below your worker section:&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;[env:myworker]&lt;/span&gt;
&lt;span class="na"&gt;PYTHONPATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/var/www/app&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;that env section simply adds the path to our app on the environment so that when chaussette tries to load our app, it'll be able to find it.&lt;/p&gt;
&lt;p&gt;Then we need to create our Circus &lt;a href="http://upstart.ubuntu.com/getting-started.html"&gt;Upstart&lt;/a&gt; script which handles starting and stopping of circus.&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;filesystem&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;device&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;up&lt;/span&gt; &lt;span class="n"&gt;IFACE&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt;
&lt;span class="n"&gt;stop&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;shutdown&lt;/span&gt;
&lt;span class="n"&gt;respawn&lt;/span&gt;
&lt;span class="n"&gt;exec&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;circusd&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nb"&gt;log&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;log&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;circus&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;log&lt;/span&gt; &lt;span class="o"&gt;\&lt;/span&gt;
                            &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;pidfile&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;circusd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt; &lt;span class="o"&gt;\&lt;/span&gt;
                            &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;www&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;circus&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ini&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;save it to &lt;code&gt;/etc/init/circus.conf&lt;/code&gt;, what this does is tells Upstart to start Circus when filesystem and network is ready (which happens when you bootup) and then stop Circus when shutting down. Respawn when the process stops without a clean death (non-zero exit code) and then finally the command to run &lt;code&gt;circusd&lt;/code&gt; which is the Circus daemon. Notice that the final argument points to &lt;code&gt;circus.ini&lt;/code&gt; file of our app. The documentation suggest to put it under &lt;code&gt;/etc/circus.ini&lt;/code&gt; which makes sense specially when you have more than one app relying on Circus but this will do for now.&lt;/p&gt;
&lt;p&gt;You need to reboot your system for Upstart to recognize your configuration but iirc there's a way to do that without rebooting I just can't remember. If you do, please feel free to comment below. :)&lt;/p&gt;
&lt;p&gt;After reboot, lets make sure that circus is in fact running:&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;service&lt;/span&gt; &lt;span class="n"&gt;circus&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;and then try accessing our app:&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;$ &lt;span class="n"&gt;curl&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;localhost&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;8000
&lt;span class="n"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;World&lt;/span&gt;!
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;already! now we just need let Nginx know to forward all incoming request to our app. Add the following Nginx config to &lt;code&gt;/etc/nginx/sites-available/myapp.conf&lt;/code&gt;:&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;listen&lt;/span&gt; 80 &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;server_name&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;location&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;proxy_pass&lt;/span&gt;         &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;127&lt;span class="p"&gt;.&lt;/span&gt;0&lt;span class="p"&gt;.&lt;/span&gt;0&lt;span class="p"&gt;.&lt;/span&gt;1&lt;span class="p"&gt;:&lt;/span&gt;8000&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;proxy_redirect&lt;/span&gt;     &lt;span class="n"&gt;off&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;proxy_buffering&lt;/span&gt;    &lt;span class="n"&gt;off&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;and then symlink it to &lt;code&gt;/etc/nginx/sites-enabled/myapp.conf&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This is a basic config which just proxies all incoming request to our wsgi app. And if we try it again, we should still get the same output as above:&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;$ &lt;span class="n"&gt;curl&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;localhost&lt;/span&gt;
&lt;span class="n"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;World&lt;/span&gt;!
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;only this time our request was sent to Nginx and passed down to Circus, you can download the updated app &lt;a href="https://dl.dropboxusercontent.com/u/829808/app.tar.gz"&gt;here&lt;/a&gt; and that's it!&lt;/p&gt;</summary></entry><entry><title>Introduction to Circus</title><link href="http://marconijr.com/introduction-to-circus.html" rel="alternate"></link><updated>2013-06-26T08:13:00+08:00</updated><author><name>Marconi Moreto</name></author><id>tag:marconijr.com,2013-06-26:introduction-to-circus.html</id><summary type="html">&lt;p&gt;Whilst the most common way in deploying Python WSGI apps is still via &lt;a href="http://gunicorn.org/"&gt;Gunicorn&lt;/a&gt;, now adays I prefer using &lt;a href="http://circus.readthedocs.org"&gt;Circus&lt;/a&gt; + &lt;a href="http://chaussette.readthedocs.org"&gt;Chaussette&lt;/a&gt;. The main difference is that, unlike before where you have Gunicorn serving your app and manages your worker processes, Circus on the other hand does all the process and socket management so Chaussette, your WSGI server, does only one thing and that's to serve your app.&lt;/p&gt;
&lt;p&gt;You can even run something like Redis inside Circus and let Circus manage it. This should feel familiar if you've used something like &lt;a href="http://supervisord.org/"&gt;Supervisor&lt;/a&gt; before as it has an overlapping functionality with Circus.&lt;/p&gt;
&lt;p&gt;Alright, enough talk and lets see some code. To start, we're going to serve a simple WSGI app in Circus:&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; Simplest wsgi application. &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Hello, World!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;200 OK&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;response_headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Content-type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;text/plain&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Content-Length&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response_headers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Our app is very simple, it just outputs the string &lt;code&gt;Hello World&lt;/code&gt;. Save it as &lt;code&gt;wsgi.py&lt;/code&gt; and next, our &lt;code&gt;circus.ini&lt;/code&gt; file:&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;[circus]&lt;/span&gt;
&lt;span class="na"&gt;check_delay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;5&lt;/span&gt;
&lt;span class="na"&gt;endpoint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;tcp://127.0.0.1:5555&lt;/span&gt;
&lt;span class="na"&gt;pubsub_endpoint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;tcp://127.0.0.1:5556&lt;/span&gt;

&lt;span class="k"&gt;[watcher:myworker]&lt;/span&gt;
&lt;span class="na"&gt;cmd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;chaussette --fd $(circus.sockets.myworker) --backend gevent wsgi.app&lt;/span&gt;
&lt;span class="na"&gt;use_sockets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;True&lt;/span&gt;
&lt;span class="na"&gt;numprocesses&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;2&lt;/span&gt;
&lt;span class="na"&gt;copy_env&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;True&lt;/span&gt;
&lt;span class="na"&gt;copy_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;True&lt;/span&gt;

&lt;span class="k"&gt;[socket:myworker]&lt;/span&gt;
&lt;span class="na"&gt;host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;127.0.0.1&lt;/span&gt;
&lt;span class="na"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;8000&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Lets focus on the watcher section, you can lookup what the other config does on the &lt;a href="http://circus.readthedocs.org/en/0.8.1/configuration/"&gt;configuration&lt;/a&gt; docs. What the watcher &lt;code&gt;myworker&lt;/code&gt; does is spawn Chaussette processes and run it over the file descriptor defined on the socket section below. Chaussette supports different kinds of backend, here we're using gevent.&lt;/p&gt;
&lt;p&gt;We're also telling our worker to only spawn 2 chaussette processes via &lt;code&gt;numprocesses&lt;/code&gt; config. The &lt;code&gt;use_sockets&lt;/code&gt; is what actually allows this worker to use the socket defined below since parent descriptors are closed by default when the child processes (Chaussette) is forked.&lt;/p&gt;
&lt;p&gt;If we don't use file descriptor, since we have two workers they will both try to bind on the default host:port of chaussette and the first one will be able to but the second one will throw an error since the port is already taken by the first worker. With file descriptors, they are inherited when forking, hence the file descriptor is shared between worker.&lt;/p&gt;
&lt;p&gt;Then lets run circus by issuing the command &lt;code&gt;circusd circus.ini&lt;/code&gt; and once circus is running, we can control our worker via &lt;code&gt;circusctl&lt;/code&gt; command. &lt;code&gt;circusctl status&lt;/code&gt; will show your worker's status, you can also restart using &lt;code&gt;circusctl restart myworker&lt;/code&gt; these should be pretty much familiar as its quite similar to other control commands. And if you're using &lt;a href="https://salt.readthedocs.org/en/latest/"&gt;SaltStack&lt;/a&gt;, you might be interested on the SaltStack module I &lt;a href="https://github.com/saltstack/salt-contrib/blob/master/modules/circus.py"&gt;wrote&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;That's it, we've used a basic WSGI app here but as you can imagine we can just as easily use the same for Django, Pyramid or any other Python web framework that has a wsgi app. Just replace &lt;code&gt;wsgi.app&lt;/code&gt; to the relative path where your wsgi app is located.&lt;/p&gt;</summary></entry><entry><title>Update</title><link href="http://marconijr.com/update.html" rel="alternate"></link><updated>2013-04-14T02:32:00+08:00</updated><author><name>Marconi Moreto</name></author><id>tag:marconijr.com,2013-04-14:update.html</id><summary type="html">&lt;p&gt;So its 2013 already and its been months since my last blog post and I have three items I want to share. First off, I figured with this year I'll start blogging again but switched from using &lt;a href="https://github.com/montylounge/django-mingus"&gt;Mingus&lt;/a&gt; to &lt;a href="http://blog.getpelican.com/"&gt;Pelican&lt;/a&gt; to power this blog mainly because its easier and lightweight.&lt;/p&gt;
&lt;p&gt;Second, my last post was in Jan. 02 when I stopped the development on &lt;a href="http://tradeorsale.ph/"&gt;Trade or Sale&lt;/a&gt;. Unfortunately I won't be migrating the old blog post from Mingus so there's no way to reach those old posts now. &lt;/p&gt;
&lt;p&gt;Third and the last item, since Feb. 01 of this year I've already started working as a Software Engineer for a company called &lt;a href="http://www.sprofila.com/"&gt;Sprofila&lt;/a&gt;, its an Australian startup that focuses on sports. Right now we're working on platform for football called &lt;a href="http://footysprofila.com/"&gt;FootySprofila&lt;/a&gt; and this month is the last month of my three months probationary period and if everything goes well, I'll be going full-time starting on May.&lt;/p&gt;
&lt;p&gt;That's it for my three items and I'm quite happy with my work right now, despite the painful ending of my 2012 to the start of this year and my failed project, I'm still thankful I managed to land a job where people  give value to what I do and not see me as typical clock-puncher to their company.&lt;/p&gt;
&lt;p&gt;If you're working for someone, make sure you're doing it for the right reasons. You'll never get those time back and money can only take you so far.&lt;/p&gt;</summary></entry></feed>